//
// Created by cx9ps3 on 11.09.2023.
//

#pragma once
#include <SDL.h>
#include "../Types.hpp"

namespace hexen::engine::core::input
{
    class Gamepad
    {
    public:
        enum class Button : u32
        {
            A = SDL_GAMEPAD_BUTTON_A,
            B = SDL_GAMEPAD_BUTTON_B,
            Y = SDL_GAMEPAD_BUTTON_Y,
            X = SDL_GAMEPAD_BUTTON_X,
            LEFT_STICK = SDL_GAMEPAD_BUTTON_LEFT_STICK,
            RIGHT_STICK = SDL_GAMEPAD_BUTTON_RIGHT_STICK,
            BACK = SDL_GAMEPAD_BUTTON_BACK,
            START = SDL_GAMEPAD_BUTTON_START,
            GUIDE  = SDL_GAMEPAD_BUTTON_GUIDE,
            LEFT_SHOULDER = SDL_GAMEPAD_BUTTON_LEFT_SHOULDER,
            RIGHT_SHOULDER = SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER,
            DPAD_UP = SDL_GAMEPAD_BUTTON_DPAD_UP,
            DPAD_DOWN = SDL_GAMEPAD_BUTTON_DPAD_DOWN,
            DPAD_RIGHT = SDL_GAMEPAD_BUTTON_DPAD_LEFT,
            DPAD_LEFT = SDL_GAMEPAD_BUTTON_DPAD_LEFT,
            MISC1 = SDL_GAMEPAD_BUTTON_MISC1,
            TOUCHPAD = SDL_GAMEPAD_BUTTON_TOUCHPAD,
            LEFT_PADDLE1 = SDL_GAMEPAD_BUTTON_LEFT_PADDLE1,
            LEFT_PADDLE2 = SDL_GAMEPAD_BUTTON_LEFT_PADDLE2,
            RIGHT_PADDLE1 = SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1,
            RIGHT_PADDLE2 = SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2,
            LEFT_TRIGGER = SDL_GAMEPAD_AXIS_LEFT_TRIGGER,
            RIGHT_TRIGGER = SDL_GAMEPAD_AXIS_RIGHT_TRIGGER,
        };

        /**
        * @class Gamepad
        * @brief Represents a gamepad input device.
        *
        * The Gamepad class is responsible for handling input from a gamepad device.
        * It provides functions to query the current state of the gamepad, such as
        * button presses and analog stick positions.
        */

        explicit Gamepad(i32 index);

        /**
        * @class Gamepad
        * @brief Represents a gamepad input device.
        *
        * The Gamepad class provides functionalities to handle gamepad input, such as button presses and analog stick movements.
        * This class is responsible for managing the lifecycle of a gamepad and freeing any resources acquired during its usage.
        *
        * @note This class assumes familiarity with the gamepad input system and how to query for gamepad events.
        */

        ~Gamepad();

        /**
        * @class hexen::engine::core::input::Gamepad
        * @brief This class handles gamepad input processing.
        *
        * It provides the functionality to process input events generated by gamepads
        * and update the corresponding gamepad state. This includes handling button
        * presses, releases, and axis movements.
        */

        void processInput(const SDL_Event &event);

        /**
        * @brief Check if a gamepad button is pressed.
        *
        * This function checks whether the specified gamepad button is currently pressed.
        *
        * @param button The gamepad button to check.
        * @return True if the button is pressed, false otherwise.
        */

        [[nodiscard]] bool isButtonPressed(Button button) const;

        /**
        * @class Gamepad
        * @brief The Gamepad class provides functionality to handle gamepad input.
        *
        * This class represents a gamepad and provides methods to check if a specified button
        * has been released.
        */

        [[nodiscard]] bool isButtonReleased(Button button) const;

        /**
        * @brief Get the name of the gamepad
        *
        * @return The name of the gamepad
        * @note This function returns the name of the gamepad as a string.
        *       It is a constant function and does not throw any exceptions.
        */

        [[nodiscard]] std::string getName() const noexcept;

        /**
        * @brief Retrieves the X-axis value of the left thumbstick of the gamepad.
        *
        * This function retrieves the raw X-axis value of the left thumbstick of the gamepad.
        *
        * @return The current X-axis value of the left thumbstick.
        */

        [[nodiscard]] float getLeftThumbstickX() const noexcept;

        /**
        * @brief Retrieves the X-axis value of the right thumbstick on the gamepad.
        *
        * @return The X-axis value of the right thumbstick as a floating-point number
        *
        * @note This function is constant and will not modify the state of the gamepad.
        * @note The thumbstick value returned is in the range of -1.0 to 1.0.
        *
        * @sa getRightThumbstickY(), getLeftThumbstickX(), getLeftThumbstickY()
        */

        [[nodiscard]] float getLeftThumbstickY() const noexcept;

        /**
        * Retrieves the Y-axis value of the left thumbstick on a gamepad.
        *
        * @return The Y-axis value of the left thumbstick as a floating-point number.
        */

        [[nodiscard]] float getRightThumbstickX() const noexcept;

        /**
        * @class hexen::engine::core::input::Gamepad
        * @brief Provides access to the gamepad input functionality.
        *
        * This class allows the retrieval of gamepad input data, including the thumbstick values.
        */

        [[nodiscard]] float getRightThumbstickY() const noexcept;

        /**
        * @brief Retrieves the ID of the gamepad.
        *
        * This method returns the unique identifier of the gamepad. The ID represents
        * the specific gamepad device that is connected to the system.
        *
        * @returns The ID of the gamepad as an integer value.
        *
        * @note This method is const and noexcept, indicating that it does not modify
        *       the internal state of the gamepad and it does not throw any exceptions.
        */

        [[nodiscard]] SDL_JoystickID getID() const noexcept;


        /**
        * @brief Retrieve a list of all available gamepads connected to the system.
        *
        * This static function returns a vector containing information about all connected gamepads.
        * Each gamepad is represented by an instance of the GamepadInfo class, which contains the
        * gamepad's ID, name, and joystick information.
        *
        * @return A vector of GamepadInfo instances representing the available gamepads.
        *
        * @warning The returned vector may be empty if no gamepads are connected.
        */

        static std::vector<std::shared_ptr<Gamepad>> getAllAvailableGamepads();

        static void addNewGamepad(SDL_JoystickID gamepadID);

        static void removeNewGamepad(SDL_JoystickID gamepadID);
    private:
        SDL_GamepadButtonEvent buttonEvent{};
        SDL_Gamepad *controller{nullptr};
        std::string name;
        SDL_JoystickID gamepadID;
        float leftAxisX{}, rightAxisX{};
        float leftAxisY{}, rightAxisY{};
        static std::vector<std::shared_ptr<Gamepad>> gamepads;
    };
}

