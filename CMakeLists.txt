cmake_minimum_required(VERSION 3.20)
project(Hexen)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

set(CORE_MODULE_NAME CoreModule)
set(RENDER_MODULE_NAME RenderingModule)
set(COMPONENTS_MODULE_NAME Components)
set(SYSTEMS_MODULE_NAME SystemsModule)
set(ENTITY_MODULE_NAME EntityModule)
set(GUI_MODULE_NAME GUIModule)

set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

option(BUILD_EDITOR "Build editor" ON)
option(BUILD_FOR_ANDROID "Build client as shared lib for Android" OFF)
option(ENABLE_PROFILING OFF)
option(ENABLE_SANITIZERS "Enable sanitizers" ON)

if(${BUILD_FOR_ANDROID})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
else()
    set(CMAKE_CXX_STANDARD 17)
endif(${BUILD_FOR_ANDROID})


add_subdirectory(engine)
add_subdirectory(client)

if(ENABLE_SANITIZERS)
    if (WIN32)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
    elseif (UNIX)
        option(ENABLE_ADDRESS_SANITIZE ON)
        if(ENABLE_ADDRESS_SANITIZE)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fsanitize=undefined")
        else ()
            option(ENABLE_THREAD_SANITIZE ON)
            if(ENABLE_THREAD_SANITIZE)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=leak -fsanitize=undefined")
            else ()
                option(ENABLE_LEAK_SANITIZE ON)
                if(ENABLE_LEAK_SANITIZE)
                    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=leak -fsanitize=undefined")
                endif (ENABLE_LEAK_SANITIZE)
            endif ()
        endif (ENABLE_ADDRESS_SANITIZE)
    endif (WIN32)
endif (ENABLE_SANITIZERS)

set(SDL_IMAGE_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/SDL_image/include/SDL3_image)
set(GLM_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/glm)
set(SDL_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/SDL/include)
set(JSON_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/json/include)
set(CONTEXT_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/boost_context/include)
set(RENDER_ENGINE_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/src/graphics)
set(CORE_ENGINE_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/src/core)
set(COMPONENTS_ENGINE_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/src/components)
set(ENTITY_ENGINE_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/src/entity)
set(JSON_BuildTests OFF CACHE INTERNAL "")

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/glm)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/SDL)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/SDL_image)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/json)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/boost_context)

if (ENABLE_OPENGL_SUPPORT)
    if (NOT ${BUILD_FOR_ANDROID})
        add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/glew-cmake)
        set(GLEW_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/engine/submodules/glew-cmake/include)
        target_include_directories(${RENDER_MODULE_NAME} PUBLIC ${GLEW_INCLUDE_DIR})
    endif (NOT ${BUILD_FOR_ANDROID})
endif ()

if (${ENABLE_PROFILING})
        add_definitions(-DTRACY_ENABLE=1)
        if(WIN32)
                target_link_libraries(${EDITOR_NAME}  wsock32 ws2_32 -ldbghelp )
        endif()
endif()

if(BUILD_EDITOR)
	set(IMGUI_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/editor/submodules/imgui)
	add_subdirectory(editor)
endif()

