def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 31
    defaultConfig {
        if (buildAsApplication) {
            applicationId "com.purehatredgames.hexenengine"
        }
        minSdkVersion 21
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
             cmake {
                 arguments "-DANDROID_APP_PLATFORM=android-21", "-DCMAKE_CXX_FLAGS=-llog" ,"-DBUILD_FOR_ANDROID=ON", "-DBUILD_SHARED=ON" , "-DBUILD_EDITOR=OFF" , "-DGAME_NAME=main"
                 abiFilters  'arm64-v8a',  'x86_64'
             }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {

             cmake {
                 version '3.26.3'
                 path '../../../CMakeLists.txt'
            }
        }
       
    }
    namespace 'org.libsdl.app'
    lint {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
